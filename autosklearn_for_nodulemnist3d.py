# -*- coding: utf-8 -*-
"""notebook618021834e

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/notebook618021834e-2e323bff-f6d6-49c9-ae58-becbd278ab8d.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240507/auto/storage/goog4_request%26X-Goog-Date%3D20240507T060432Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D63672b627eb33d48c494c3aeaf41ebed23840b2b936d3d328ee7f955228d3c85e8759b52e4e951db75f5948bac75fe2348f802148d961a4eeca0aaf2547a504e8ebc930171d6eb47bdc706b0c2c571addefcace2eb67dba44e336bfe2cf280df4db887e3e37a3e165347a36e03fa95453e89a8f651219095231775b54b6b368720f4349baab1bf8847fc981fbec76d32f13f1b9da3f9d75607b88c675b5e600bac845911e7a9f61491a9b3efdfe22c13ac2cc5f08b96d6566650063698069cf0e45aa036efa3c44aeb30e4ee672b33f7e112d05043979fa225ef3dedf0df81f4ac399e06ed1a355b947d5775b7c99d1edf0a51ed86481e7c1017e94d9ebc1c2c
"""

!pip install scipy==1.8.1

!pip install Cython==0.29.35

!pip install scikit-learn==0.24.2 --no-build-isolation

!pip install auto-sklearn
import autosklearn

!pip install medmnist

import medmnist
from medmnist import NoduleMNIST3D
train_dataset = NoduleMNIST3D(download=True, split= 'train')
test_dataset = NoduleMNIST3D(download=True, split= 'test')

pip install --upgrade numpy

import argparse
import os

import autosklearn.classification
import joblib
import numpy as np
from medmnist import INFO, Evaluator
from medmnist.info import DEFAULT_ROOT

def main(data_flag, time, input_root, output_root, run, model_path):

    time = time * 60 * 60

    info = INFO[data_flag]
    task = info['task']

    dataset_path = '/kaggle/input/standardized-biomedical-images-medmnist/nodulemnist3d.npz'

# Check if the dataset file exists
    if os.path.exists(dataset_path):
    # If the file exists, load the dataset directly
        npz_file = np.load(dataset_path)
        x_train = npz_file['train_images']
        y_train = npz_file['train_labels']
        x_val = npz_file['val_images']
        y_val = npz_file['val_labels']
        x_test = npz_file['test_images']
        y_test = npz_file['test_labels']
    # Continue loading other parts of the dataset as needed
    else:
        _ = getattr(medmnist, INFO[data_flag]['python_class'])(
            split="train", root=input_root, download=True)

    output_root = os.path.join(output_root, data_flag)
    if not os.path.isdir(output_root):
        os.makedirs(output_root)

    size = x_train[0].size
    X_train = x_train.reshape(x_train.shape[0], size, )
    X_val = x_val.reshape(x_val.shape[0], size, )
    X_test = x_test.reshape(x_test.shape[0], size, )

    y_train = y_train.ravel()
    y_val = y_val.ravel()
    y_test = y_test.ravel()

    if model_path is not None:
        model = joblib.load(model_path)
        test(model, data_flag, X_train, 'train', output_root, run)
        test(model, data_flag, X_val, 'val', output_root, run)
        test(model, data_flag, X_test, 'test', output_root, run)

    if time == 0:
        return

    model = train(data_flag, time, X_train, y_train, X_val, y_val, run, output_root)

    test(model, data_flag, X_train, 'train', output_root, run)
    test(model, data_flag, X_val, 'val', output_root, run)
    test(model, data_flag, X_test, 'test', output_root, run)


def train(data_flag, time, X_train, y_train, X_val, y_val, run, output_root):

    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=int(time),
        per_run_time_limit=int(time/10),
        tmp_folder='./tmp/autosklearn_classification_medmnist_tmp/%s' % (data_flag),
        n_jobs=4,
    )

    automl.fit(X_train, y_train, X_val, y_val)

    joblib.dump(automl, os.path.join(output_root, '%s_autosklearn_%s.m' % (data_flag, run)))

    return automl


def test(model, data_flag, x, split, output_root, run):

    evaluator = medmnist.Evaluator(data_flag, split)
    y_score = model.predict_proba(x)
    auc, acc = evaluator.evaluate(y_score, output_root, run)
    print('%s  auc: %.5f  acc: %.5f ' % (split, auc, acc))

    return auc, acc

args = {
    'data_flag': 'nodulemnist3d',
    'input_root': '/kaggle/input/standardized-biomedical-images-medmnist/nodulemnist3d.npz',
    'output_root': './autosklearn',
    'time': 0.25,
    'run': 'model1',
    'model_path': None
}

main(args['data_flag'], args['time'], args['input_root'], args['output_root'], args['run'], args['model_path'])